#!/bin/bash
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# 0.0.2
# Alexey Potehin <gnuplanet@gmail.com>, http://www.gnuplanet.ru/doc/cv
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# check depends
function check_prog()
{
	for i in ${1};
	do
		if [ "$(command -v ${i})" == "" ];
		then
			echo "FATAL: you must install \"${i}\"...";
			return 1;
		fi
	done

	return 0;
}
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
function make_go()
{
# check depends tools
	check_prog "go";
	if [ "${?}" != "0" ];
	then
		return 1;
	fi


	if [ "${TARGET_FILE}" == "" ];
	then
		echo "ERROR: you must set TARGET_FILE";
		exit 1;
	fi
	echo "rm -rf ./${TARGET_FILE}";
	rm -rf "./${TARGET_FILE}" &> /dev/null < /dev/null;


	export GO111MODULE=auto;
	export CGO_ENABLED=0
	export GOOS=linux
	export GOARCH=amd64


	echo "go get -v ./...";
	go get -v ./...;


	echo "go build -o ./${TARGET_FILE} *.go";
	if [ "${MAKE_OPTIMIZE}" == "0" ]
	then
		echo "build without optimize";
		go build -o "./${TARGET_FILE}" -gcflags '-N -l' *.go;
	else
		echo "build with optimize";
		go build -o "./${TARGET_FILE}" -a -tags netgo -ldflags '-s -w -extldflags "-static"' *.go;
	fi

	if [ "${?}" != "0" ];
	then
		echo "ERROR: can not build";
		return 1;
	fi


	if [ ! -e "${TARGET_FILE}" ];
	then
		echo "ERROR: \"${TARGET_FILE}\" is not found";
		return 1;
	fi


	echo "done";


	return 0;
}
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
# general function
function main()
{
	if [ -e ./.env ];
	then
#		export $(cat .env);
		source .env;
	fi


	make_go;


	return 0;
}
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
main "${@}";

exit "${?}";
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------#
